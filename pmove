local function teleportPartsToPosition(x, y, z)
    local folder = game:GetService("Workspace").Terrain["_Game"]:FindFirstChild("Folder")

    if folder then
        for _, part in pairs(folder:GetChildren()) do
            if part:IsA("BasePart") then
                local newPosition = Vector3.new(x, y, z)
                part.CFrame = CFrame.new(newPosition)
            end
        end
    else
        warn("Folder not found in Terrain")
    end
end

local function teleportPartToPosition(sizeX, sizeY, sizeZ, x, y, z)
    local folder = game:GetService("Workspace").Terrain["_Game"]:FindFirstChild("Folder")

    if folder then
        for _, part in pairs(folder:GetChildren()) do
            if part:IsA("BasePart") then
                local partSize = part.Size
                if partSize == Vector3.new(sizeX, sizeY, sizeZ) then
                    local newPosition = Vector3.new(x, y, z)
                    part.CFrame = CFrame.new(newPosition)
                end
            end
        end
    else
        warn("Folder not found in Terrain")
    end
end

local function changePartVelocity(sizeX, sizeY, sizeZ, velX, velY, velZ)
    local folder = game:GetService("Workspace").Terrain["_Game"]:FindFirstChild("Folder")

    if folder then
        for _, part in pairs(folder:GetChildren()) do
            if part:IsA("BasePart") then
                local partSize = part.Size
                if partSize == Vector3.new(sizeX, sizeY, sizeZ) then
                    local newVelocity = Vector3.new(velX, velY, velZ)
                    part.Velocity = newVelocity
                end
            end
        end
    else
        warn("Folder not found in Terrain")
    end
end

local function parseAndTeleportParts(input)
    local sets = {}
    for set in input:gmatch("(%S+%s+%S+%s+%S+%s+%S+%s+%S+%s+%S+)") do
        local sizeX, sizeY, sizeZ, x, y, z = set:match("(%S+)%s+(%S+)%s+(%S+)%s+(%S+)%s+(%S+)%s+(%S+)")
        table.insert(sets, {sizeX = tonumber(sizeX), sizeY = tonumber(sizeY), sizeZ = tonumber(sizeZ), x = tonumber(x), y = tonumber(y), z = tonumber(z)})
    end

    for _, set in ipairs(sets) do
        teleportPartToPosition(set.sizeX, set.sizeY, set.sizeZ, set.x, set.y, set.z)
    end
end

game.Players.LocalPlayer.Chatted:Connect(function(msg)
    local prefix = string.match(msg, "%S+")
    if prefix == ".pmove" then
        local arguments = string.sub(msg, #prefix + 1)
        local x, y, z = arguments:match("(%S+)%s+(%S+)%s+(%S+)")
        
        if x and y and z then
            teleportPartsToPosition(tonumber(x), tonumber(y), tonumber(z))
        else
            warn("Usage: .pmove <x> <y> <z>")
        end
    elseif prefix == ".spmove" then
        local arguments = string.sub(msg, #prefix + 1)
        parseAndTeleportParts(arguments)
    elseif prefix == ".pvel" then
        local arguments = string.sub(msg, #prefix + 1)
        local sizeX, sizeY, sizeZ, velX, velY, velZ = arguments:match("(%S+)%s+(%S+)%s+(%S+)%s+(%S+)%s+(%S+)%s+(%S+)")
        
        if sizeX and sizeY and sizeZ and velX and velY and velZ then
            changePartVelocity(tonumber(sizeX), tonumber(sizeY), tonumber(sizeZ), tonumber(velX), tonumber(velY), tonumber(velZ))
        else
            warn("Usage: .pvel <sizeX> <sizeY> <sizeZ> <velX> <velY> <velZ>")
        end
    end
end)
